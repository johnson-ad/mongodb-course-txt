1-Creation de db:
	use + nomDB; 
	NB : sa cree la db si elle n'existe pas et si elle existe sa stwich directement

2-Supprimer un db:
	db.dropDatabase();
	NB: sa supprime la db dans laquelle on se trouve

3-Help:
	db.help();
	NB: pour avoir tout les commandes

4-Collection:
	Les collection sont comme les tables des sql

5-Creer une collection:
	db.createCollection('leNom'); //leNom <=> le nom de la table en sql

6-Voir les collections creer:
	show collections + enter

7-Avoir les plus d'information sur une collection du genre : sa taille, son poid ...
	db.leNomCollectionCreer.stats();

8-Supprimer une collection:
	db.NomCollection.drop();

9-Creer une collection bcp plus precis du genre a specifier la taille le poid etc..
	db.createCollection('nomCollection', { rentrerLesValeursSpecifique } )
	NB: pour connaitre les veleur specifique ( voir le point 7 )
	ex:  db.createCollection('Person',{capped: true, size: 6142800, max: 3000}) // size: l'unite cest bit, max: cest le max de doc


10-Creer une collection avec un Documents:
	le document fais juste alusion json 
	ex: student = { "frist-name" : "Johnson", "last-name": "Adolphe", "email":"email@email.com", "gender": "M", "country": "Senegal", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":0.00}
	
	db.nomCollection.insert( nomDocument );  // ici nomDocument cest student

11-Insertion de document plus complexe:
	ex: students = [
		{ "firstName" : "Johnson", "lastName": "Adolphe", "email":"email@email.com", "gender": "M", "country": "Senegal", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":0.00},
		{ "firstName" : "Jane", "lastName": "Johnson", "email":"email@email.com", "gender": "F", "country": "Congo", "isStudentActive": true, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":10.00},
		{ "firstName" : "Jack", "lastName": "Carter", "email":"email@email.com", "gender": "M", "country": "New-York", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":20.00},
		{ "firstName" : "Jason", "lastName": "Parker", "email":"email@email.com", "gender": "M", "country": "Brithon", "isStudentActive": true, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":30.00},
		{ "firstName" : "Jane", "lastName": "King", "email":"email@email.com", "gender": "F", "country": "Congo", "isStudentActive": true, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":10.00},
		{ "firstName" : "Jack", "lastName": "Kane", "email":"email@email.com", "gender": "M", "country": "New-York", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":20.00}
	]
	
	db.nomCollection.insertMany( nomDocument ); //ici cest students

	NB: Pour ajouter un doc on peut le faire directement dans la methode insert( {cle : valeur}) ou creer l'objet a part et le faire comme dans les exemples precedents

12-Find	<=> de select en sql:	
		pour cela on utilise la methode find()
		ex: db.student.find({firstName:'Jane'}).pretty() // affiche touts les information document ki on pour firstName Jane 
		NB: la methode pretty() // permet juste d'avoir une affissage format json

12-1-Autre methode d'utiliser find():
	db.student.find({firstName:'Jane'}, {firstName : 1}, {lastName : 1}).pretty() // va afficher uniquement les elmt a rechercher : ici cest firstName, lastName 

12-3-Un autre Affissage 
	db.student.find({} , {totalSpendInBooks : 1} ).pretty()
	NB: 1= true et 0 = false
	RQ: 1 : permet de recuperer ke le doc en question et non de tout le doc

12-4-Affiche avec tri:
	limit(nombre) // retroune le doc fonction de la limite poser
	skip(nombre) // affiche tout sauf le nombre passer en param
	sort() // affiche les resultats en ordre croissant ou decroissant pour cela on utilise 1 pour croissant, et -1 pour decroissant
		ex: db.student.find({}).pretty().sort({name : 1 }) // par ordre croissant en fonction du nom

13-Update:
	syntaxe: db.nomCollection.update( { _id : donnerID }, { $set : { key : NewValue } )
	NB: pour avoir l'id il suffit db.student.find({firstName:'Jane'}).pretty() et apres faire comme dans l'exemles

	ex: db.student.update( {_id : ObjectId("62c222d98d0cbef00093e925")}, {$set : {firstName : 'Jeny'}} ) // $set va modifier Jane par Jeny 

13-1-Updat many object:
	syntaxe: db.nomCollection.updateMany( { _id : donnerID }, { $set : { key : NewValue }, { $set : { key : NewValue } )

13-2-Update and delete:
	syntaxe: db.nomCollection.update( { _id : donnerID }, { $unset : 1 ) // unset va supprimer la data en qtion
	
13-3-Update bonnus:
	$inc : { key : NewValue }  // permet d'incrementer un nbre
	$pull : { key : NewValue }  // permet de supprimer un elnt dans un tableau
	$push : { key : NewValue }  // permet d'ajouter un elent dans un tableau

14-Delete:
	syntaxe: db.nomCollection.deleteOne( {_id : donnerID } )
	ex: db.student.deleteOne( {_id : ObjectId("62c222d98d0cbef00093e925")} ) // va suprimer Jeny

	NB: deleteMany() // permet de supprimer plusieur doc

15-Indexation et Aggretate ( les jointure en sql ):
	Index:
	  Par defaut l'indexation porte sur _id, on peut ajouter d'autre indexation histoire de rendre les recherche bcp plus rapide
	  pour cela on utilse: ensureIndex({ key: 1}) 
		ex: db.student.ensureIndex( { name : 1}) // on aura _id et name comme index

	Suprimer un index:
		dropIndex({key : 1})
		ex: db.student.dropIndex({ name : 1})


	Agragation:
		// joining two collection
		db.collectionName.aggregate([{
						$lookup : {
							from : nomDuPremierCollection,
							localField : nomDeuxiemeCollection,
							foreignField : " keyLaison ",
							as : " nom alias "
							}
					}])

		framework(pipline) : project - match - sort - skip - limit - unwind
		expression(option) : sum - avg - min - max - push - addToSet - first - last	

16-Relationship:
	=> one to one :
ex1:

const customerSchema = new mongoose.Schema({
    name: String,
    age: Number,
    gender: String
});

const Customer = mongoose.model('cunstoner', customerSchema);


const identifierSchema = new mongoose.Schema({
    customerCode: String,
    customer: customerSchema // on aura tout le contenu de customerSchema 
});


// deuxieme methode : le customer va juste pointer vers l'objet customer 
const identifierSchema = new mongoose.Schema({
    customerCode: String,
    customer: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'cunstoner'
    }
});

const Indentifier = mongoose.model('indentifier', identifierSchema);
