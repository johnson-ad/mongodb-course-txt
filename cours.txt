1-Creation de db:
	use + nomDB; 
	NB : sa cree la db si elle n'existe pas et si elle existe sa stwich directement

2-Supprimer un db:
	db.dropDatabase();
	NB: sa supprime la db dans laquelle on se trouve

3-Help:
	db.help();
	NB: pour avoir tout les commandes

4-Collection:
	Les collection sont comme les tables des sql

5-Creer une collection:
	db.createCollection('leNom'); //leNom <=> le nom de la table en sql

6-Voir les collections creer:
	show collections + enter

7-Avoir les plus d'information sur une collection du genre : sa taille, son poid ...
	db.leNomCollectionCreer.stats();

8-Supprimer une collection:
	db.NomCollection.drop();

9-Creer une collection bcp plus precis du genre a specifier la taille le poid etc..
	db.createCollection('nomCollection', { rentrerLesValeursSpecifique } )
	NB: pour connaitre les veleur specifique ( voir le point 7 )
	ex:  db.createCollection('Person',{capped: true, size: 6142800, max: 3000}) // size: l'unite cest bit, max: cest le max de doc


10-Creer une collection avec un Documents:
	le document fais juste alusion json 
	ex: student = { "frist-name" : "Johnson", "last-name": "Adolphe", "email":"email@email.com", "gender": "M", "country": "Senegal", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":0.00}
	
	db.nomCollection.insert( nomDocument );  // ici nomDocument cest student

11-Insertion de document plus complexe:
	ex: students = [
		{ "firstName" : "Johnson", "lastName": "Adolphe", "email":"email@email.com", "gender": "M", "country": "Senegal", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":0.00},
		{ "firstName" : "Jane", "lastName": "Johnson", "email":"email@email.com", "gender": "F", "country": "Congo", "isStudentActive": true, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":10.00},
		{ "firstName" : "Jack", "lastName": "Carter", "email":"email@email.com", "gender": "M", "country": "New-York", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":20.00},
		{ "firstName" : "Jason", "lastName": "Parker", "email":"email@email.com", "gender": "M", "country": "Brithon", "isStudentActive": true, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":30.00},
		{ "firstName" : "Jane", "lastName": "King", "email":"email@email.com", "gender": "F", "country": "Congo", "isStudentActive": true, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":10.00},
		{ "firstName" : "Jack", "lastName": "Kane", "email":"email@email.com", "gender": "M", "country": "New-York", "isStudentActive": false, "favouriteSubjects":["maths","english","it"], "totalSpentInBooks":20.00}
	]
	
	db.nomCollection.insertMany( nomDocument ); //ici cest students

	NB: Pour ajouter un doc on peut le faire directement dans la methode insert( {cle : valeur}) ou creer l'objet a part et le faire comme dans les exemples precedents

12-Find	<=> de select en sql:	
		pour cela on utilise la methode find()
		ex: db.student.find({firstName:'Jane'}).pretty() // affiche touts les information document ki on pour firstName Jane 
		NB: la methode pretty() // permet juste d'avoir une affissage format json

12-1-Autre methode d'utiliser find():
	db.student.find({firstName:'Jane'}, {firstName : 1}, {lastName : 1}).pretty() // va afficher uniquement les elmt a rechercher : ici cest firstName, lastName 


12-2-Afficher tout  sauf celle kon a passe dans le find():
	db.student.find({firstName:'Jane'}, {firstName : -1}, {lastName : -1}, {gender: -1}).pretty()

12-3-Un autre Affissage 
	db.student.find({firstName:'Jane'}, {firstName : 0}, {lastName : 0}).pretty()



	